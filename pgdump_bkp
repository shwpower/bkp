#!/bin/ksh


# SCRIPT:       pgdump_bkp
# AUTHOR:       Shen Wei
# DATE:         Apr 30 2014
# REV:          1.0

# PLATFORM:     Linux (Not platform dependent)
#
# REQUIREMENTS: PostgreSQL database 8/9+ is installed
#               pg_dump commnad is required
#               It run under postgres user (PostgreSQL database owner)
#
#
# PURPOSE: The script is backup the PostgreSQL database by pg_dump
#
#
# REV LIST:
#        DATE: Apr 30 2014
#        BY:   Wei
#        MODIFICATION: Creation
#
#
# set -n   # Uncomment to check script syntax, without execution.
#          # NOTE: Do not forget to put the # comment back in or
#          #       the shell script will never execute!
# set -x   # Uncomment to debug this shell script
#

PROGRAM_NAME=$(basename $0)
PROGRAM_PATH=$(dirname $0)
ROOT_PATH=$(dirname $PROGRAM_PATH)
PROGRAM_VERSION=1.0
HOST=$(hostname)
BKPDIR=$ROOT_PATH

LOGFILE=$PROGRAM_PATH/${PROGRAM_NAME}.${HOST}.log
MAIL_SENDER="Suz_Backup@xxx.com"
PROGRAM_ADMIN_MAIL="shwpower@gmail.com"

##########################################################
#              DEFINE FUNCTIONS HERE
##########################################################
############################
function print_usage
{
        # Function to print script usage
        echo "Usage:"
        #echo "  $PROGRAM_NAME"
        echo "  $PROGRAM_NAME -f <PostgreSQL Config File>"
        echo "  $PROGRAM_NAME -v"
        echo "  $PROGRAM_NAME -h"
}
############################
function print_version
{
        #### Function to print script's version
        echo "$1 v$2"
}
############################
function print_help
{
        # Function to print help messages
        print_version $PROGRAM_NAME $PROGRAM_VERSION
        echo ""
        print_usage
        echo ""
        echo "PostgreSQL pg_dump backup cronjob for all platform Unix/Linux System"
        echo ""
        echo " -f <PostgreSQL Config File>"
        echo "  PostgreSQL_DB PostgreSQL_HOME"
        echo "  The default : pgdb.conf"
        echo ""
}

############################
function print_msg
{
        #### Function to print messages with timestamp ####
        msg=$*

        if [ ! -z "${msg}" ]
        then
                curdate=$(date '+%D %T')
                print -- "${curdate} : ${msg}" |tee -a ${LOGFILE}
        else
                print -- "${curdate} :" | tee -a ${LOGFILE}
        fi
}

############################
function pre_running_status
{
        # Judge the previous cronjob running is existed
        STATUS=$(ps -eaf|grep $PROGRAM_NAME|grep -v grep |grep -v $$|wc -l)
        if [ $STATUS -ge 1 ]
        then
                print_msg "Program previous $PROGRAM_NAME is running -- " > $MAILFILE
                echo -e "\n" >>$MAILFILE
                ps -eaf|grep $PROGRAM_NAME|grep -v grep >> $MAILFILE
                cat $MAILFILE |mailx -r $MAIL_SENDER -s "Please stop the previous $PROGRAM_NAME before this time running" $PROGRAM_ADMIN_MAIL
                print_msg "Exit..."

                rm $MAILFILE
                exit
        fi
}


##########################################################
#               BEGINNING OF MAIN
##########################################################
while getopts f:d:hv next; do
        case $next in
                f)
                 CFGFILE=$OPTARG
                 ;;
                d)
                 PG_DB=$OPTARG
                 ;;
                h)
                 print_help
                 exit
                 ;;
                v)
                 print_version $PROGRAM_NAME $PROGRAM_VERSION
                 exit
                 ;;
                *)
                 print_usage
                 exit
                 ;;
        esac
done

CFGFILE=$PROGRAM_PATH/${CFGFILE:-pgdb.conf}
if [ "$PG_DB" == "" ]; then
        print_msg "No DB provided"
        print_usage
        exit
fi

if [ ! -f $CFGFILE ]; then
        echo "Could not find the PostgreSQL DB Configure File"|mailx -r $MAIL_SENDER -s "Error while running $PROGRAM_NAME at $(date) on $HOST" $PROGRAM_ADMIN_MAIL
        exit
fi

STATUS=$(cat $CFGFILE |grep $PG_DB |grep -v ^#|wc -l)
if [ $STATUS  == "1" ]; then
        PG_DB=$(cat $CFGFILE|grep $PG_DB|grep -v ^#|awk '{print $1}')
        PG_HOME=$(cat $CFGFILE|grep $PG_DB|grep -v ^#|awk '{print $2}')
        MAIL_RCV=$(cat $CFGFILE|grep $PG_DB|grep -v ^#|awk '{print $3}')

        print_msg "Start to Backup the $DB (under $PG_HOME)"
        if [ ! -x $PG_HOME/bin/pg_dump ] ;then
                echo "Could not find the pg_dump"|mailx -r $MAIL_SENDER -s "Error while running $PROGRAM_NAME at $(date) on $HOST" $PROGRAM_ADMIN_MAIL
        else
                print_msg "Executing $PG_HOME/bin/pg_dump -Fc -f $BKPDIR/$PG_DB/$PG_DB-`date +%a`.pgdump $PG_DB"
                $PG_HOME/bin/pg_dump -Fc -f $BKPDIR/$PG_DB/$PG_DB-`date +%a`.pgdump $PG_DB 2>>$LOGFILE
                if [ $? -ne 0 ]; then
                        print_msg "Error while executing $PG_HOME/bin/pg_dump"
                        echo "PostgreSQL backup Error, Please check $LOGFILE" |mailx -r $MAIL_SENDER -s "Error while running $PROGRAM_NAME at $(date) on $HOST" $MAIL_RCV
                else
                        print_msg "End to execute $PG_HOME/bin/pg_dump"
                        print_msg "$(ls -l $BKPDIR/$PG_DB/$PG_DB-$(date +%a).pgdump) "
                        print_msg "Successfully backup $PG_DB"
                        ls -l $BKPDIR/$PG_DB/$PG_DB-`date +%a`.pgdump |mailx -r $MAIL_SENDER -s "$PG_DB PGDB backup finished successfully at $(date) on $HOST" $MAIL_RCV

                fi
        fi
else
        print_msg "Wrong PostgreSQL DB Configure file"
fi

